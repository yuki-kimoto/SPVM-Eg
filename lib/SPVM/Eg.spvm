# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Eg {
  version "0.012";
  
  use Eg::Node;
  use Eg::Document;
  use Eg::Element;
  use Eg::Text;
  use Eg::Runtime;
  
  use Hash;
  use List;
  use StringBuffer;
  
  our $RUNTIME : rw Eg::Runtime;
  
  static method tag : Eg::Element ($tag_name : string, $child_nodes_or_text : object of Eg::Node[]|string = undef) {
    
    my $child_nodes = (Eg::Node[])undef;
    if ($child_nodes_or_text) {
      if ($child_nodes_or_text is_type string) {
        $child_nodes = [Eg::Text->new((string)$child_nodes_or_text)];
      }
      elsif ($child_nodes_or_text isa Eg::Node[]) {
        $child_nodes = (Eg::Node[])$child_nodes_or_text;
      }
      else {
        die "The type of \$child_nodes_or_text must inherit Eg::Element or must be string.";
      }
    }
    
    my $new_element_node = Eg::Element->new($tag_name, undef, $child_nodes);
    
    return $new_element_node;
  }
  
  static method tag_ : Eg::Element ($tag_name : string, $attributes : object[] = undef, $child_nodes_or_text : object of Eg::Node[]|string = undef) {    
    my $child_nodes = (Eg::Node[])undef;
    if ($child_nodes_or_text) {
      if ($child_nodes_or_text is_type string) {
        $child_nodes = [Eg::Text->new((string)$child_nodes_or_text)];
      }
      elsif ($child_nodes_or_text isa Eg::Node[]) {
        $child_nodes = (Eg::Node[])$child_nodes_or_text;
      }
      else {
        die "The type of \$child_nodes_or_text must inherit Eg::Node or must be string.";
      }
    }
    
    my $new_element_node = Eg::Element->new($tag_name, $attributes, $child_nodes);
    
    return $new_element_node;
  }
  
  # Experimenta Features
  static method window : Eg::Window () {
    return $RUNTIME->window;
  }
  
}
