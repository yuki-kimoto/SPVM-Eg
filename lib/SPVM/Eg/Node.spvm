# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Eg::Node {
  allow Eg;
  
  use Hash;
  use List;
  use StringBuffer;
  
  enum {
    TYPE_ELEMENT_NODE = 1,
    TYPE_ATTRIBUTE_NODE = 2,
    TYPE_TEXT_NODE = 3,
    TYPE_CDATA_SECTION_NODE = 4,
    TYPE_PROCESSING_INSTRUCTION_NODE = 7,
    TYPE_COMMENT_NODE = 8,
    TYPE_DOCUMENT_NODE = 9,
    TYPE_DOCUMENT_TYPE_NODE = 10,
    TYPE_DOCUMENT_FRAGMENT_NODE = 11,
  }
  
  # Fields
  has type : ro int;
  
  has nodes : ro List of Eg::Node;
  
  has attributes : ro Hash of string;
  
  has style : ro Hash of string;
  
  has tag_name : ro string;
  
  has text : ro StringBuffer;
  
  has parent : Eg::Node;
  
  # Class Methods
  private static method new : Eg::Node ($type : int, $nodes : Eg::Node[] = undef) {
    
    my $self = new Eg::Node;
    
    $self->{type} = $type;
    
    $self->{nodes} = List->new($nodes);
    
    if ($nodes) {
      for my $node (@$nodes) {
        $node->{parent} = $self;
        weaken $node->{parent};
      }
    }
    
    return $self;
  }
  
  static method new_element : Eg::Node ($tag_name : string, $nodes : Eg::Node[] = undef, $attributes : object[] = undef) {
    
    unless ($tag_name) {
      die "\$tag_namet must be defined.";
    }
    
    my $self = Eg::Node->new(Eg::Node->TYPE_ELEMENT_NODE, $nodes);
    
    $self->{tag_name} = $tag_name;
    
    {
      my $attributes = Hash->new($attributes);
      
      $self->{attributes} = $attributes;
      
      my $style = $self->{attributes}->delete("style");
      
      {
        my $style = Hash->new((object[])$style);
        $self->{style} = $style;
      }
    }
    
    return $self;
  }
  
  static method new_text : Eg::Node ($text : string) {
    
    unless ($text) {
      die "\$text must be defined.";
    }
    
    my $self = Eg::Node->new(Eg::Node->TYPE_TEXT_NODE);
    
    my $text_buffer = StringBuffer->new;
    
    $text_buffer->push($text);
    
    $self->{text} = $text_buffer;
    
    return $self;
  }
}
