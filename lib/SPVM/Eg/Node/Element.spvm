# Copyright (c) 2024 Yuki Kimoto
# MIT License

# Element in JavaScript
class Eg::Node::Element extends Eg::Node {
  allow Eg;
  allow Eg::Node::Document;
  allow Eg::Node::Document::HTML;
  allow Eg::Node::Document::XML;
  allow Eg::DOM::Implementation;
  
  use Eg::DOM::Implementation;
  use Fn;
  
  use Eg::Node::Element::HTML;
  
  has attributes_h : ro Hash of string;
  
  has tag_name : protected string;
  
  # Class Methods
  private static method new : Eg::Node::Element () {
    
    my $self = new Eg::Node::Element;
    
    $self->init;
    
    return $self;
  }
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    $self->SUPER::init({node_type => Eg::Node->TYPE_ELEMENT_NODE});
  }
  
  method get_attribute : string ($name : string) {
    
    unless ($name) {
      die "\$name must be defined.";
    }
    
    my $attributes_h = $self->{attributes_h};
    
    unless ($self->{attributes_h}) {
      return undef;
    }
    
    my $owner_document = $self->owner_document;
    
    if ($owner_document && $owner_document is_type Eg::Node::Document && $self isa Eg::Node::Element::HTML) {
      $name = Fn->lc($name);
    }
    
    if ($name eq "nonce") {
      return "";
    }
    
    my $attribute = $attributes_h->get_string($name);
    
    return $attribute;
  }
  
  method set_attribute : void ($name : string, $value : string) {
    
    unless ($name) {
      die "\$name must be defined.";
    }
    
    unless ($value) {
      die "\$value must be defined.";
    }
    
    my $attributes_h = $self->{attributes_h};
    
    my $owner_document = $self->owner_document;
    
    if ($owner_document && $owner_document is_type Eg::Node::Document && $self isa Eg::Node::Element::HTML) {
      $name = Fn->lc($name);
    }
    
    unless ($attributes_h) {
      $attributes_h = $self->{attributes_h} = Hash->new;
    }
    
    $attributes_h->set_string($name, $value);
  }
  
  method remove_attribute : void ($name : string) {
    
    unless ($name) {
      die "\$name must be defined.";
    }
    
    my $attributes_h = $self->{attributes_h};
    
    my $deleted_attribute = (string)undef;
    
    if ($self->{attributes_h}) {
      $attributes_h->delete($name);
    }
  }
  
  method has_attribute : int ($name : string) {
    
    my $attributes_h = $self->{attributes_h};
    
    my $exists = 0;
    if ($attributes_h) {
      $exists = $attributes_h->exists($name);
    }
    
    return $exists;
  }
  
  method attribute_pairs : string[] () {
    
    my $attributes_h = $self->{attributes_h};
    
    my $attribute_pairs = (string[])undef;
    
    if ($attributes_h) {
      my $names = $attributes_h->keys;
      
      Sort->sort_string_asc($names);
      
      my $attribute_pairs_list = StringList->new;
      for my $name (@$names) {
        my $value = $attributes_h->get_string($name);
        
        $attribute_pairs_list->push($name);
        $attribute_pairs_list->push($value);
      }
      
      $attribute_pairs = $attribute_pairs_list->to_array;
    }
    else {
      $attribute_pairs = new string[0];
    }
    
    return $attribute_pairs;
  }
  
  method text : string () {
    my $child_nodes = $self->child_nodes;
    
    my $child_nodes_length = @$child_nodes;
    
    my $text = (string)undef;
    
    if ($child_nodes_length > 0) {
      my $first_child = (Eg::Node)$child_nodes->[0];
      
      if ($first_child->node_type == Eg::Node->TYPE_TEXT_NODE) {
        $text = $first_child->(Eg::Node::Text)->node_value_buffer->to_string;
      }
      else {
        die "The first child is not a text node.";
      }
    }
    else {
      return "";
    }
    
    return $text;
  }
  
  method set_text : string ($text : string) {
    my $child_nodes = $self->child_nodes;
    
    my $child_nodes_length = @$child_nodes;
    
    if ($child_nodes_length > 0) {
      my $first_child = (Eg::Node)$child_nodes->[0];
      
      if ($first_child->node_type == Eg::Node->TYPE_TEXT_NODE) {
        $first_child->(Eg::Node::Text)->node_value_buffer->set($text);
      }
      else {
        die "The first child is not a text node.";
      }
    }
    else {
      my $text_node = Eg::DOM::Implementation->new->create_html_document->create_text_node($text);
      
      $self->{first_child} = $text_node;
      
      $self->{last_child } = $text_node;
    }
    
  }
  
  # jQuery Instance Methods
  method attr : string ($name : string) {
    
    my $attr = $self->get_attribute($name);
    
    return $attr;
  }
  
  method set_attr : void ($name : string, $value : string) {
    
    $self->set_attribute($name, $value);
  }
  
  method remove_attr : void ($name : string) {
    
    $self->remove_attribute($name);
  }
  
  method tag_name : string () {
    
    my $tag_name = $self->{tag_name};
    
    # HTML
    if ($self isa Eg::Node::Element::HTML) {
      $tag_name = Fn->uc($tag_name);
    }
    
    return $tag_name;
  }
  
}
