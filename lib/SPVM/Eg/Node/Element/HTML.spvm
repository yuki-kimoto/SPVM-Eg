# Copyright (c) 2024 Yuki Kimoto
# MIT License

# HTMLElement in JavaScript
class Eg::Node::Element::HTML extends Eg::Node::Element {
  allow Eg::Node::Document;
  allow Eg::Node::Element;
  allow Eg::Node::Document::HTML;
  
  use Eg::CSS::StyleDeclaration;
  
  # Fields
  has styles_h : rw Hash of string;
  
  has css_text : rw string;
  
  has computed_styles_h : rw Hash of string;
  
  has computed_style : ro Eg::CSS::StyleDeclaration;
  
  has style : ro Eg::CSS::StyleDeclaration;
  
  # Class Methods
  private static method new : Eg::Node::Element::HTML () {
    
    my $self = new Eg::Node::Element::HTML;
    
    $self->init;
    
    return $self;
  }
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    $self->{style} = Eg::CSS::StyleDeclaration->new;
    
    $self->SUPER::init;
  }
  
  method css : string ($name : string) {
    
    my $styles_h = $self->{styles_h};
    
    unless ($self->{styles_h}) {
      return undef;
    }
    
    my $css = (string)$styles_h->get($name);
    
    return $css;
  }
  
  method style_pairs : string[] () {
    
    my $styles_h = $self->{styles_h};
    
    my $style_pairs = (string[])undef;
    
    if ($styles_h) {
      my $names = $styles_h->keys;
      
      Sort->sort_string_asc($names);
      
      my $style_pairs_list = StringList->new;
      for my $name (@$names) {
        my $value = $styles_h->get_string($name);
        
        $style_pairs_list->push($name);
        $style_pairs_list->push($value);
      }
      
      $style_pairs = $style_pairs_list->to_array;
    }
    else {
      $style_pairs = new string[0];
    }
    
    return $style_pairs;
  }
  
  method computed_style_pairs : string[] () {
    
    my $computed_styles_h = $self->{computed_styles_h};
    
    my $computed_style_pairs = (string[])undef;
    
    if ($computed_styles_h) {
      my $names = $computed_styles_h->keys;
      
      Sort->sort_string_asc($names);
      
      my $computed_style_pairs_list = StringList->new;
      for my $name (@$names) {
        my $value = $computed_styles_h->get_string($name);
        
        $computed_style_pairs_list->push($name);
        $computed_style_pairs_list->push($value);
      }
      
      $computed_style_pairs = $computed_style_pairs_list->to_array;
    }
    else {
      $computed_style_pairs = new string[0];
    }
    
    return $computed_style_pairs;
  }
  
}
