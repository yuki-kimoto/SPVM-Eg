# Copyright (c) 2024 Yuki Kimoto
# MIT License

# HTMLElement in JavaScript
class Eg::Node::Element::HTML extends Eg::Node::Element {
  allow Eg::Node::Document;
  allow Eg::Node::Element;
  allow Eg::Node::Document::HTML;
  
  use Eg::CSS::StyleDeclaration;
  
  # Fields
  has style : ro Eg::CSS::StyleDeclaration;
  
  # Class Methods
  private static method new : Eg::Node::Element::HTML ($options : object[] = undef) {
    
    my $self = new Eg::Node::Element::HTML;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    $self->SUPER::init($options);
    
    $self->{style} = Eg::CSS::StyleDeclaration->new;
  }
  
  method get_attribute : string ($name : string) {
    
    if ($name) {
      $name = Fn->lc($name);
      
      if ($name eq "style" && $self->has_attribute($name)) {
        return $self->style->css_text;
      }
    }
    
    my $attribute_value = $self->SUPER::get_attribute($name);
    
    return $attribute_value;
  }
  
  method set_attribute : void ($name : string, $value : string) {
    
    if ($name) {
      $name = Fn->lc($name);
      
      if ($name eq "style") {
        
        unless ($value) {
          die "\$value must be defined.";
        }
        
        $self->style->set_css_text($value);
        
        $self->SUPER::set_attribute($name, "dummy");
        
        return;
      }
    }
    
    $self->SUPER::set_attribute($name, $value);
  }
  
  method tag_name : string () {
    
    my $tag_name = $self->{node_name};
    
    $tag_name = Fn->uc($tag_name);
    
    return $tag_name;
  }
}
