class TestCase::Eg {
  use Eg;
  use Eg::Node;
  
  static method test : int () {
    
    {
      unless (Eg::Node->TYPE_ELEMENT_NODE == 1) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_ATTRIBUTE_NODE == 2) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_TEXT_NODE == 3) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_CDATA_SECTION_NODE == 4) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_PROCESSING_INSTRUCTION_NODE == 7) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_COMMENT_NODE == 8) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_DOCUMENT_NODE == 9) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_DOCUMENT_TYPE_NODE == 10) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_DOCUMENT_FRAGMENT_NODE == 11) {
        return 0;
      }
    }
    
    {
      my $div = Eg->div_({style => {color => "red"}});
    
      unless ($div->attributes->style) {
        return 0;
      }
    
      unless ($div->css("color") eq "red") {
        return 0;
      }
    }
    
    {
      my $div = Eg->div;
    }
    
    {
      my $div = Eg->div([Eg->text("foo")]);
      
      unless ($div->tag_name eq "div") {
        return 0;
      }
      
      unless ($div->type == Eg::Node->TYPE_ELEMENT_NODE) {
        return 0;
      }
      
    }
    
    {
      my $div = Eg->div_({attr1 => "attrval1"}, [Eg->text("foo")]);
      
      unless ($div->tag_name eq "div") {
        return 0;
      }
      
      unless ($div->type == Eg::Node->TYPE_ELEMENT_NODE) {
        return 0;
      }
      
      unless ($div->attr("attr1") eq "attrval1") {
        return 0;
      }
    }
    
    {
      my $div = Eg->div_({class => "foo bar", id => "foo", style => {color => "red"}},
        [Eg->div, Eg->text("foo")],
      );
    }
    
    {
      my $ul = Eg->ul_(
        {class => "foo bar", id => "foo", style => {color => "red"}},
        [
          Eg->li([Eg->text("1")]),
          Eg->li([Eg->text("2")]),
          Eg->li([Eg->text("3")]),
        ],
      );
      
      unless ($ul->nodes->get(0)->(Eg::Node)->nodes->get(0)->(Eg::Node)->text->to_string eq "1") {
        return 0;
      }
      
      unless ($ul->nodes->get(1)->(Eg::Node)->nodes->get(0)->(Eg::Node)->text->to_string eq "2") {
        return 0;
      }
    }
    
    {
      my $table = Eg->table_(
        {class => "foo bar", id => "foo", style => {color => "red"}},
        [
          Eg->tr([
            Eg->td([Eg->text("1-1")]), Eg->td([Eg->text("1-2")])
          ]),
          Eg->tr([
            Eg->td([Eg->text("2-1")]), Eg->td([Eg->text("2-2")])
          ]),
        ],
      );
    }
    
    {
      my $text = Eg->text("foo");
      
      unless ($text->type == Eg::Node->TYPE_TEXT_NODE) {
        return 0;
      }
      
      unless ($text->text->to_string eq "foo") {
        return 0;
      }
    }
    
    return 1;
  }
}
