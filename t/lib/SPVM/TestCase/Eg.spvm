class TestCase::Eg {
  use Eg;
  use Eg::Node;
  use Eg::DOMImplementation;
  
  static method test : int () {
    
    my $dom_impl = Eg::DOMImplementation->new;
    
    my $document = $dom_impl->create_html_document;
    
    {
      unless (Eg::Node->TYPE_ELEMENT_NODE == 1) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_ATTRIBUTE_NODE == 2) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_TEXT_NODE == 3) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_CDATA_SECTION_NODE == 4) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_PROCESSING_INSTRUCTION_NODE == 7) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_COMMENT_NODE == 8) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_DOCUMENT_NODE == 9) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_DOCUMENT_TYPE_NODE == 10) {
        return 0;
      }
      
      unless (Eg::Node->TYPE_DOCUMENT_FRAGMENT_NODE == 11) {
        return 0;
      }
    }
    
    {
      my $div = Eg->tag_("div", {style => {color => "red"}});
      
      unless ($div->css("color") eq "red") {
        return 0;
      }
    }
    
    
    {
      my $div = Eg->tag("div", [$document->create_text_node("foo")]);
      
      unless ($div->tag_name eq "div") {
        return 0;
      }
      
      unless ($div->node_type == Eg::Node->TYPE_ELEMENT_NODE) {
        return 0;
      }
      
    }
    
    # attribute
    {
      my $div = Eg->tag_("div", {attribute1 => "attributeval1"});
      
      unless ($div->get_attribute("attribute1") eq "attributeval1") {
        return 0;
      }
      
      if ($div->get_attribute("attribute2")) {
        return 0;
      }
    }
    
    # set_attribute
    {
      my $div = $document->create_element("div");
      
      $div->set_attribute("attribute1", "attributeval1");
      
      unless ($div->get_attribute("attribute1") eq "attributeval1") {
        return 0;
      }
      
    }
    
    # has_attribute
    {
      my $div = Eg->tag_("div", {attribute1 => "attributeval1", attribute2 => undef});
      
      unless ($div->has_attribute("attribute1")) {
        return 0;
      }
      
      unless ($div->has_attribute("attribute2")) {
        return 0;
      }
      
      if ($div->has_attribute("attribute3")) {
        return 0;
      }
    }
    
    # remove_attribute
    {
      my $div = Eg->tag_("div", {attribute1 => "attributeval1", attribute2 => "attributeval2"});
      
      $div->remove_attribute("attribute1");
      
      $div->remove_attribute("attribute3");
      
      unless (Array->equals_string($div->attribute_pairs, ["attribute2" => "attributeval2"])) {
        return 0;
      }
    }
    
    # attribute_pairs
    {
      my $div = Eg->tag_("div", {attr1 => "attrval1", attr2 => "attrval2"});
      
      my $attribute_pairs = $div->attribute_pairs;
      
      unless (Array->equals_string($attribute_pairs, ["attr1", "attrval1", "attr2", "attrval2"])) {
        return 0;
      }
    }
    
    # css
    {
      my $div = Eg->tag_("div", {style => {css1 => "cssval1"}});
      
      unless ($div->css("css1") eq "cssval1") {
        return 0;
      }
      
      if ($div->css("css2")) {
        return 0;
      }
    }
    
    # set_css
    {
      my $div = Eg->tag_("div", {style => {}});
      
      $div->set_css("css1", "cssval1");
      
      unless ($div->css("css1") eq "cssval1") {
        return 0;
      }
      
    }
    
    # exists_css
    {
      my $div = Eg->tag_("div", {style => {css1 => "cssval1", css2 => undef}});
      
      unless ($div->exists_css("css1")) {
        return 0;
      }
      
      unless ($div->exists_css("css2")) {
        return 0;
      }
      
      if ($div->exists_css("css3")) {
        return 0;
      }
    }
    
    # delete_css
    {
      my $div = Eg->tag_("div", {style => {css1 => "cssval1", css2 => "cssval2"}});
      
      $div->remove_css("css1");
      
      $div->remove_css("css3");
      
      unless (Array->equals_string($div->style_pairs, ["css2" => "cssval2"])) {
        return 0;
      }
    }
    
    # style_pairs
    {
      my $div = Eg->tag_("div", {style => {css1 => "cssval1", css2 => "cssval2"}});
      
      my $style_pairs = $div->style_pairs;
      
      unless (Array->equals_string($style_pairs, ["css1", "cssval1", "css2", "cssval2"])) {
        return 0;
      }
    }
    
    {
      my $div = Eg->tag_("div", {class => "foo bar", id => "foo", style => {color => "red"}},
        [(Eg::Node)Eg->div, $document->create_text_node("foo")],
      );
    }
    
    {
      my $div = Eg->tag_("div", {class => "foo bar", id => "foo", style => {color => "red"}},
        [Eg->div, Eg->span("foo")],
      );
    }
    
    {
      my $div = Eg->tag_("div", {class => "foo bar", id => "foo", style => {color => "red"}},
        [
          Eg->tag("div"),
          # Foo
          Eg->tag("span", "foo"),

=pod

Foo

=cut

          Eg->tag("span", "bar")
        ],
      );
    }
    
    {
      my $ul = Eg->tag_("ul",
        {class => "foo bar", id => "foo", style => {color => "red"}},
        [
          Eg->tag("li", "1"),
          Eg->tag("li", "2"),
          Eg->tag("li", "3"),
        ],
      );
      
      unless ($ul->child_nodes->[0]->child_nodes->[0]->node_value eq "1") {
        return 0;
      }
      
      unless ($ul->child_nodes->[1]->child_nodes->[0]->node_value eq "2") {
        return 0;
      }
    }
    
    # child_nodes
    {
      {
        my $ul = Eg->tag_("ul",
          {class => "foo bar", id => "foo", style => {color => "red"}},
          [
            Eg->tag("li", "1"),
            Eg->tag("li", "2"),
            Eg->tag("li", "3"),
          ],
        );
        
        my $child_nodes = $ul->child_nodes;
        
        unless (@$child_nodes == 3) {
          return 0;
        }
        
        unless ($child_nodes->[0]->(Eg::Element)->text eq "1") {
          return 0;
        }
        
        unless ($child_nodes->[1]->(Eg::Element)->text eq "2") {
          return 0;
        }
        
        unless ($child_nodes->[2]->(Eg::Element)->text eq "3") {
          return 0;
        }
      }
      
      {
        my $ul = Eg->tag_("ul",
          {class => "foo bar", id => "foo", style => {color => "red"}},
        );
        
        my $child_nodes = $ul->child_nodes;
        
        unless (@$child_nodes == 0) {
          return 0;
        }
      }
    }
    
    {
      my $table = Eg->tag_("table",
        {class => "foo bar", id => "foo", style => {color => "red"}},
        [
          Eg->tag("tr", [
            Eg->tag("td", "1-1"), Eg->tag("td", "1-2")
          ]),
          Eg->tag("tr", [
            Eg->tag("td", "2-1"), Eg->tag("td", "2-2")
          ]),
        ],
      );
    }
    
    {
      my $text = $document->create_text_node("foo");
      
      unless ($text->node_type == Eg::Node->TYPE_TEXT_NODE) {
        return 0;
      }
      
      unless ($text->data eq "foo") {
        return 0;
      }
    }
    
    {
      my $div = $document->create_element("div");
      
      unless ($div->text eq "") {
        return 0;
      }
      
      $div->set_text("bar");
      
      unless ($div->text eq "bar") {
        return 0;
      }
    }
    
    {
      my $div = $document->create_element("div");
        
      $div->set_text("foo");
      
      
      unless ($div->text eq "foo") {
        return 0;
      }
      
      $div->set_text("bar");
      
      unless ($div->text eq "bar") {
        return 0;
      }
    }
    
    {
      my $div = $document->create_element("div");
        
      $div->set_attribute(atrr => "value");
      
      $div->set_text("foo");
      
      unless ($div->text eq "foo") {
        return 0;
      }
      
      $div->set_text("bar");
      
      unless ($div->text eq "bar") {
        return 0;
      }
    }
    
    {
      my $document = Eg->new_document(
        Eg->html([
          Eg->head,
          Eg->body,
        ])
      );
      
      unless ($document->document_element->tag_name eq "html") {
        return 0;
      }
      
      unless ($document->head->tag_name eq "head") {
        return 0;
      }
      
      unless ($document->body->tag_name eq "body") {
        return 0;
      }
      
    }
    
    # jQuery
    {
      # attr
      {
        my $div = $document->create_element("div");
        
        $div->set_attribute(attr1 => "attrval1");
        
        unless ($div->attr("attr1") eq "attrval1") {
          return 0;
        }
        
        if ($div->attr("attr2")) {
          return 0;
        }
      }
      
      # set_attr
      {
        my $div = $document->create_element("div");
        
        $div->set_attr("attr1", "attrval1");
        
        unless ($div->attr("attr1") eq "attrval1") {
          return 0;
        }
        
      }
      
      # remove_attr
      {
        my $div = $document->create_element("div");
        
        $div->set_attribute(attr1 => "attrval1");
        $div->set_attribute(attr2 => "attrval2");
        
        $div->remove_attr("attr1");
        
        $div->remove_attr("attr3");
        
        unless (Array->equals_string($div->attribute_pairs, ["attr2" => "attrval2"])) {
          return 0;
        }
      }
    }
    
    return 1;
  }
}
